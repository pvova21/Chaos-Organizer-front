!function(){"use strict";function e(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function t(t){return t instanceof e(t).Element||t instanceof Element}function n(t){return t instanceof e(t).HTMLElement||t instanceof HTMLElement}function o(t){return"undefined"!=typeof ShadowRoot&&(t instanceof e(t).ShadowRoot||t instanceof ShadowRoot)}var s=Math.max,r=Math.min,i=Math.round;function a(){var e=navigator.userAgentData;return null!=e&&e.brands&&Array.isArray(e.brands)?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}function c(){return!/^((?!chrome|android).)*safari/i.test(a())}function d(o,s,r){void 0===s&&(s=!1),void 0===r&&(r=!1);var a=o.getBoundingClientRect(),d=1,l=1;s&&n(o)&&(d=o.offsetWidth>0&&i(a.width)/o.offsetWidth||1,l=o.offsetHeight>0&&i(a.height)/o.offsetHeight||1);var u=(t(o)?e(o):window).visualViewport,p=!c()&&r,f=(a.left+(p&&u?u.offsetLeft:0))/d,h=(a.top+(p&&u?u.offsetTop:0))/l,m=a.width/d,g=a.height/l;return{width:m,height:g,top:h,right:f+m,bottom:h+g,left:f,x:f,y:h}}function l(t){var n=e(t);return{scrollLeft:n.pageXOffset,scrollTop:n.pageYOffset}}function u(e){return e?(e.nodeName||"").toLowerCase():null}function p(e){return((t(e)?e.ownerDocument:e.document)||window.document).documentElement}function f(e){return d(p(e)).left+l(e).scrollLeft}function h(t){return e(t).getComputedStyle(t)}function m(e){var t=h(e),n=t.overflow,o=t.overflowX,s=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+s+o)}function g(t,o,s){void 0===s&&(s=!1);var r,a,c=n(o),h=n(o)&&function(e){var t=e.getBoundingClientRect(),n=i(t.width)/e.offsetWidth||1,o=i(t.height)/e.offsetHeight||1;return 1!==n||1!==o}(o),g=p(o),v=d(t,h,s),y={scrollLeft:0,scrollTop:0},b={x:0,y:0};return(c||!c&&!s)&&(("body"!==u(o)||m(g))&&(y=(r=o)!==e(r)&&n(r)?{scrollLeft:(a=r).scrollLeft,scrollTop:a.scrollTop}:l(r)),n(o)?((b=d(o,!0)).x+=o.clientLeft,b.y+=o.clientTop):g&&(b.x=f(g))),{x:v.left+y.scrollLeft-b.x,y:v.top+y.scrollTop-b.y,width:v.width,height:v.height}}function v(e){var t=d(e),n=e.offsetWidth,o=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-o)<=1&&(o=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:o}}function y(e){return"html"===u(e)?e:e.assignedSlot||e.parentNode||(o(e)?e.host:null)||p(e)}function b(e){return["html","body","#document"].indexOf(u(e))>=0?e.ownerDocument.body:n(e)&&m(e)?e:b(y(e))}function w(t,n){var o;void 0===n&&(n=[]);var s=b(t),r=s===(null==(o=t.ownerDocument)?void 0:o.body),i=e(s),a=r?[i].concat(i.visualViewport||[],m(s)?s:[]):s,c=n.concat(a);return r?c:c.concat(w(y(a)))}function E(e){return["table","td","th"].indexOf(u(e))>=0}function x(e){return n(e)&&"fixed"!==h(e).position?e.offsetParent:null}function L(t){for(var s=e(t),r=x(t);r&&E(r)&&"static"===h(r).position;)r=x(r);return r&&("html"===u(r)||"body"===u(r)&&"static"===h(r).position)?s:r||function(e){var t=/firefox/i.test(a());if(/Trident/i.test(a())&&n(e)&&"fixed"===h(e).position)return null;var s=y(e);for(o(s)&&(s=s.host);n(s)&&["html","body"].indexOf(u(s))<0;){var r=h(s);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||t&&"filter"===r.willChange||t&&r.filter&&"none"!==r.filter)return s;s=s.parentNode}return null}(t)||s}var O="top",H="bottom",S="right",j="left",k="auto",M=[O,H,S,j],_="start",B="end",D="viewport",C="popper",A=M.reduce((function(e,t){return e.concat([t+"-"+_,t+"-"+B])}),[]),F=[].concat(M,[k]).reduce((function(e,t){return e.concat([t,t+"-"+_,t+"-"+B])}),[]),q=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function W(e){var t=new Map,n=new Set,o=[];function s(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var o=t.get(e);o&&s(o)}})),o.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||s(e)})),o}var T={placement:"bottom",modifiers:[],strategy:"absolute"};function R(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function P(e){void 0===e&&(e={});var n=e,o=n.defaultModifiers,s=void 0===o?[]:o,r=n.defaultOptions,i=void 0===r?T:r;return function(e,n,o){void 0===o&&(o=i);var r,a,c={placement:"bottom",orderedModifiers:[],options:Object.assign({},T,i),modifiersData:{},elements:{reference:e,popper:n},attributes:{},styles:{}},d=[],l=!1,u={state:c,setOptions:function(o){var r="function"==typeof o?o(c.options):o;p(),c.options=Object.assign({},i,c.options,r),c.scrollParents={reference:t(e)?w(e):e.contextElement?w(e.contextElement):[],popper:w(n)};var a,l,f=function(e){var t=W(e);return q.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((a=[].concat(s,c.options.modifiers),l=a.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(l).map((function(e){return l[e]}))));return c.orderedModifiers=f.filter((function(e){return e.enabled})),c.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,o=void 0===n?{}:n,s=e.effect;if("function"==typeof s){var r=s({state:c,name:t,instance:u,options:o});d.push(r||function(){})}})),u.update()},forceUpdate:function(){if(!l){var e=c.elements,t=e.reference,n=e.popper;if(R(t,n)){c.rects={reference:g(t,L(n),"fixed"===c.options.strategy),popper:v(n)},c.reset=!1,c.placement=c.options.placement,c.orderedModifiers.forEach((function(e){return c.modifiersData[e.name]=Object.assign({},e.data)}));for(var o=0;o<c.orderedModifiers.length;o++)if(!0!==c.reset){var s=c.orderedModifiers[o],r=s.fn,i=s.options,a=void 0===i?{}:i,d=s.name;"function"==typeof r&&(c=r({state:c,options:a,name:d,instance:u})||c)}else c.reset=!1,o=-1}}},update:(r=function(){return new Promise((function(e){u.forceUpdate(),e(c)}))},function(){return a||(a=new Promise((function(e){Promise.resolve().then((function(){a=void 0,e(r())}))}))),a}),destroy:function(){p(),l=!0}};if(!R(e,n))return u;function p(){d.forEach((function(e){return e()})),d=[]}return u.setOptions(o).then((function(e){!l&&o.onFirstUpdate&&o.onFirstUpdate(e)})),u}}var N={passive:!0};function V(e){return e.split("-")[0]}function I(e){return e.split("-")[1]}function U(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function $(e){var t,n=e.reference,o=e.element,s=e.placement,r=s?V(s):null,i=s?I(s):null,a=n.x+n.width/2-o.width/2,c=n.y+n.height/2-o.height/2;switch(r){case O:t={x:a,y:n.y-o.height};break;case H:t={x:a,y:n.y+n.height};break;case S:t={x:n.x+n.width,y:c};break;case j:t={x:n.x-o.width,y:c};break;default:t={x:n.x,y:n.y}}var d=r?U(r):null;if(null!=d){var l="y"===d?"height":"width";switch(i){case _:t[d]=t[d]-(n[l]/2-o[l]/2);break;case B:t[d]=t[d]+(n[l]/2-o[l]/2)}}return t}var G={top:"auto",right:"auto",bottom:"auto",left:"auto"};function z(t){var n,o=t.popper,s=t.popperRect,r=t.placement,a=t.variation,c=t.offsets,d=t.position,l=t.gpuAcceleration,u=t.adaptive,f=t.roundOffsets,m=t.isFixed,g=c.x,v=void 0===g?0:g,y=c.y,b=void 0===y?0:y,w="function"==typeof f?f({x:v,y:b}):{x:v,y:b};v=w.x,b=w.y;var E=c.hasOwnProperty("x"),x=c.hasOwnProperty("y"),k=j,M=O,_=window;if(u){var D=L(o),C="clientHeight",A="clientWidth";D===e(o)&&"static"!==h(D=p(o)).position&&"absolute"===d&&(C="scrollHeight",A="scrollWidth"),(r===O||(r===j||r===S)&&a===B)&&(M=H,b-=(m&&D===_&&_.visualViewport?_.visualViewport.height:D[C])-s.height,b*=l?1:-1),r!==j&&(r!==O&&r!==H||a!==B)||(k=S,v-=(m&&D===_&&_.visualViewport?_.visualViewport.width:D[A])-s.width,v*=l?1:-1)}var F,q=Object.assign({position:d},u&&G),W=!0===f?function(e,t){var n=e.x,o=e.y,s=t.devicePixelRatio||1;return{x:i(n*s)/s||0,y:i(o*s)/s||0}}({x:v,y:b},e(o)):{x:v,y:b};return v=W.x,b=W.y,l?Object.assign({},q,((F={})[M]=x?"0":"",F[k]=E?"0":"",F.transform=(_.devicePixelRatio||1)<=1?"translate("+v+"px, "+b+"px)":"translate3d("+v+"px, "+b+"px, 0)",F)):Object.assign({},q,((n={})[M]=x?b+"px":"",n[k]=E?v+"px":"",n.transform="",n))}var J={left:"right",right:"left",bottom:"top",top:"bottom"};function X(e){return e.replace(/left|right|bottom|top/g,(function(e){return J[e]}))}var Y={start:"end",end:"start"};function K(e){return e.replace(/start|end/g,(function(e){return Y[e]}))}function Q(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&o(n)){var s=t;do{if(s&&e.isSameNode(s))return!0;s=s.parentNode||s.host}while(s)}return!1}function Z(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function ee(n,o,r){return o===D?Z(function(t,n){var o=e(t),s=p(t),r=o.visualViewport,i=s.clientWidth,a=s.clientHeight,d=0,l=0;if(r){i=r.width,a=r.height;var u=c();(u||!u&&"fixed"===n)&&(d=r.offsetLeft,l=r.offsetTop)}return{width:i,height:a,x:d+f(t),y:l}}(n,r)):t(o)?function(e,t){var n=d(e,!1,"fixed"===t);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(o,r):Z(function(e){var t,n=p(e),o=l(e),r=null==(t=e.ownerDocument)?void 0:t.body,i=s(n.scrollWidth,n.clientWidth,r?r.scrollWidth:0,r?r.clientWidth:0),a=s(n.scrollHeight,n.clientHeight,r?r.scrollHeight:0,r?r.clientHeight:0),c=-o.scrollLeft+f(e),d=-o.scrollTop;return"rtl"===h(r||n).direction&&(c+=s(n.clientWidth,r?r.clientWidth:0)-i),{width:i,height:a,x:c,y:d}}(p(n)))}function te(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function ne(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}function oe(e,o){void 0===o&&(o={});var i=o,a=i.placement,c=void 0===a?e.placement:a,l=i.strategy,f=void 0===l?e.strategy:l,m=i.boundary,g=void 0===m?"clippingParents":m,v=i.rootBoundary,b=void 0===v?D:v,E=i.elementContext,x=void 0===E?C:E,j=i.altBoundary,k=void 0!==j&&j,_=i.padding,B=void 0===_?0:_,A=te("number"!=typeof B?B:ne(B,M)),F=x===C?"reference":C,q=e.rects.popper,W=e.elements[k?F:x],T=function(e,o,i,a){var c="clippingParents"===o?function(e){var o=w(y(e)),s=["absolute","fixed"].indexOf(h(e).position)>=0&&n(e)?L(e):e;return t(s)?o.filter((function(e){return t(e)&&Q(e,s)&&"body"!==u(e)})):[]}(e):[].concat(o),d=[].concat(c,[i]),l=d[0],p=d.reduce((function(t,n){var o=ee(e,n,a);return t.top=s(o.top,t.top),t.right=r(o.right,t.right),t.bottom=r(o.bottom,t.bottom),t.left=s(o.left,t.left),t}),ee(e,l,a));return p.width=p.right-p.left,p.height=p.bottom-p.top,p.x=p.left,p.y=p.top,p}(t(W)?W:W.contextElement||p(e.elements.popper),g,b,f),R=d(e.elements.reference),P=$({reference:R,element:q,strategy:"absolute",placement:c}),N=Z(Object.assign({},q,P)),V=x===C?N:R,I={top:T.top-V.top+A.top,bottom:V.bottom-T.bottom+A.bottom,left:T.left-V.left+A.left,right:V.right-T.right+A.right},U=e.modifiersData.offset;if(x===C&&U){var G=U[c];Object.keys(I).forEach((function(e){var t=[S,H].indexOf(e)>=0?1:-1,n=[O,H].indexOf(e)>=0?"y":"x";I[e]+=G[n]*t}))}return I}function se(e,t,n){return s(e,r(t,n))}function re(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function ie(e){return[O,S,H,j].some((function(t){return e[t]>=0}))}var ae=P({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var n=t.state,o=t.instance,s=t.options,r=s.scroll,i=void 0===r||r,a=s.resize,c=void 0===a||a,d=e(n.elements.popper),l=[].concat(n.scrollParents.reference,n.scrollParents.popper);return i&&l.forEach((function(e){e.addEventListener("scroll",o.update,N)})),c&&d.addEventListener("resize",o.update,N),function(){i&&l.forEach((function(e){e.removeEventListener("scroll",o.update,N)})),c&&d.removeEventListener("resize",o.update,N)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=$({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,o=n.gpuAcceleration,s=void 0===o||o,r=n.adaptive,i=void 0===r||r,a=n.roundOffsets,c=void 0===a||a,d={placement:V(t.placement),variation:I(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:s,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,z(Object.assign({},d,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:i,roundOffsets:c})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,z(Object.assign({},d,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:c})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var o=t.styles[e]||{},s=t.attributes[e]||{},r=t.elements[e];n(r)&&u(r)&&(Object.assign(r.style,o),Object.keys(s).forEach((function(e){var t=s[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,o={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,o.popper),t.styles=o,t.elements.arrow&&Object.assign(t.elements.arrow.style,o.arrow),function(){Object.keys(t.elements).forEach((function(e){var s=t.elements[e],r=t.attributes[e]||{},i=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:o[e]).reduce((function(e,t){return e[t]="",e}),{});n(s)&&u(s)&&(Object.assign(s.style,i),Object.keys(r).forEach((function(e){s.removeAttribute(e)})))}))}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,o=e.name,s=n.offset,r=void 0===s?[0,0]:s,i=F.reduce((function(e,n){return e[n]=function(e,t,n){var o=V(e),s=[j,O].indexOf(o)>=0?-1:1,r="function"==typeof n?n(Object.assign({},t,{placement:e})):n,i=r[0],a=r[1];return i=i||0,a=(a||0)*s,[j,S].indexOf(o)>=0?{x:a,y:i}:{x:i,y:a}}(n,t.rects,r),e}),{}),a=i[t.placement],c=a.x,d=a.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=c,t.modifiersData.popperOffsets.y+=d),t.modifiersData[o]=i}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,o=e.name;if(!t.modifiersData[o]._skip){for(var s=n.mainAxis,r=void 0===s||s,i=n.altAxis,a=void 0===i||i,c=n.fallbackPlacements,d=n.padding,l=n.boundary,u=n.rootBoundary,p=n.altBoundary,f=n.flipVariations,h=void 0===f||f,m=n.allowedAutoPlacements,g=t.options.placement,v=V(g),y=c||(v!==g&&h?function(e){if(V(e)===k)return[];var t=X(e);return[K(e),t,K(t)]}(g):[X(g)]),b=[g].concat(y).reduce((function(e,n){return e.concat(V(n)===k?function(e,t){void 0===t&&(t={});var n=t,o=n.placement,s=n.boundary,r=n.rootBoundary,i=n.padding,a=n.flipVariations,c=n.allowedAutoPlacements,d=void 0===c?F:c,l=I(o),u=l?a?A:A.filter((function(e){return I(e)===l})):M,p=u.filter((function(e){return d.indexOf(e)>=0}));0===p.length&&(p=u);var f=p.reduce((function(t,n){return t[n]=oe(e,{placement:n,boundary:s,rootBoundary:r,padding:i})[V(n)],t}),{});return Object.keys(f).sort((function(e,t){return f[e]-f[t]}))}(t,{placement:n,boundary:l,rootBoundary:u,padding:d,flipVariations:h,allowedAutoPlacements:m}):n)}),[]),w=t.rects.reference,E=t.rects.popper,x=new Map,L=!0,B=b[0],D=0;D<b.length;D++){var C=b[D],q=V(C),W=I(C)===_,T=[O,H].indexOf(q)>=0,R=T?"width":"height",P=oe(t,{placement:C,boundary:l,rootBoundary:u,altBoundary:p,padding:d}),N=T?W?S:j:W?H:O;w[R]>E[R]&&(N=X(N));var U=X(N),$=[];if(r&&$.push(P[q]<=0),a&&$.push(P[N]<=0,P[U]<=0),$.every((function(e){return e}))){B=C,L=!1;break}x.set(C,$)}if(L)for(var G=function(e){var t=b.find((function(t){var n=x.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return B=t,"break"},z=h?3:1;z>0&&"break"!==G(z);z--);t.placement!==B&&(t.modifiersData[o]._skip=!0,t.placement=B,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,o=e.name,i=n.mainAxis,a=void 0===i||i,c=n.altAxis,d=void 0!==c&&c,l=n.boundary,u=n.rootBoundary,p=n.altBoundary,f=n.padding,h=n.tether,m=void 0===h||h,g=n.tetherOffset,y=void 0===g?0:g,b=oe(t,{boundary:l,rootBoundary:u,padding:f,altBoundary:p}),w=V(t.placement),E=I(t.placement),x=!E,k=U(w),M="x"===k?"y":"x",B=t.modifiersData.popperOffsets,D=t.rects.reference,C=t.rects.popper,A="function"==typeof y?y(Object.assign({},t.rects,{placement:t.placement})):y,F="number"==typeof A?{mainAxis:A,altAxis:A}:Object.assign({mainAxis:0,altAxis:0},A),q=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,W={x:0,y:0};if(B){if(a){var T,R="y"===k?O:j,P="y"===k?H:S,N="y"===k?"height":"width",$=B[k],G=$+b[R],z=$-b[P],J=m?-C[N]/2:0,X=E===_?D[N]:C[N],Y=E===_?-C[N]:-D[N],K=t.elements.arrow,Q=m&&K?v(K):{width:0,height:0},Z=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},ee=Z[R],te=Z[P],ne=se(0,D[N],Q[N]),re=x?D[N]/2-J-ne-ee-F.mainAxis:X-ne-ee-F.mainAxis,ie=x?-D[N]/2+J+ne+te+F.mainAxis:Y+ne+te+F.mainAxis,ae=t.elements.arrow&&L(t.elements.arrow),ce=ae?"y"===k?ae.clientTop||0:ae.clientLeft||0:0,de=null!=(T=null==q?void 0:q[k])?T:0,le=$+ie-de,ue=se(m?r(G,$+re-de-ce):G,$,m?s(z,le):z);B[k]=ue,W[k]=ue-$}if(d){var pe,fe="x"===k?O:j,he="x"===k?H:S,me=B[M],ge="y"===M?"height":"width",ve=me+b[fe],ye=me-b[he],be=-1!==[O,j].indexOf(w),we=null!=(pe=null==q?void 0:q[M])?pe:0,Ee=be?ve:me-D[ge]-C[ge]-we+F.altAxis,xe=be?me+D[ge]+C[ge]-we-F.altAxis:ye,Le=m&&be?function(e,t,n){var o=se(e,t,n);return o>n?n:o}(Ee,me,xe):se(m?Ee:ve,me,m?xe:ye);B[M]=Le,W[M]=Le-me}t.modifiersData[o]=W}},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,o=e.name,s=e.options,r=n.elements.arrow,i=n.modifiersData.popperOffsets,a=V(n.placement),c=U(a),d=[j,S].indexOf(a)>=0?"height":"width";if(r&&i){var l=function(e,t){return te("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:ne(e,M))}(s.padding,n),u=v(r),p="y"===c?O:j,f="y"===c?H:S,h=n.rects.reference[d]+n.rects.reference[c]-i[c]-n.rects.popper[d],m=i[c]-n.rects.reference[c],g=L(r),y=g?"y"===c?g.clientHeight||0:g.clientWidth||0:0,b=h/2-m/2,w=l[p],E=y-u[d]-l[f],x=y/2-u[d]/2+b,k=se(w,x,E),_=c;n.modifiersData[o]=((t={})[_]=k,t.centerOffset=k-x,t)}},effect:function(e){var t=e.state,n=e.options.element,o=void 0===n?"[data-popper-arrow]":n;null!=o&&("string"!=typeof o||(o=t.elements.popper.querySelector(o)))&&Q(t.elements.popper,o)&&(t.elements.arrow=o)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,o=t.rects.reference,s=t.rects.popper,r=t.modifiersData.preventOverflow,i=oe(t,{elementContext:"reference"}),a=oe(t,{altBoundary:!0}),c=re(i,o),d=re(a,s,r),l=ie(c),u=ie(d);t.modifiersData[n]={referenceClippingOffsets:c,popperEscapeOffsets:d,isReferenceHidden:l,hasPopperEscaped:u},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":u})}}]});class ce{constructor(){this.popupMsg=document.querySelector(".error-wrapper")}show(e,t){const n=ae(e,this.popupMsg,{placement:"top",modifiers:[{name:"offset",options:{offset:[0,6]}}]});this.popupMsg.querySelector(".error-message").textContent=t,this.popupMsg.setAttribute("data-show",""),n.update(),setTimeout((()=>{this.popupMsg.removeAttribute("data-show")}),2500)}}class de{createElement(e){const{type:t}=e;let n=null;switch(t){case"text":case"geolocation":n=this.constructor.createTextElement(e);break;case"file":n=this.constructor.createFileElement(e);break;case"weather":n=this.constructor.createWeatherElement(e)}return n}static createFileElement(e){const{category:t}=e.info;let n=null;return t.startsWith("image/")?(n=this.createImageElement(e),n):t.startsWith("audio/")?(n=this.createAudioElement(e),n):!!t.startsWith("video/")&&(n=this.createVideoElement(e),n)}static createTextElement(e){const{date:t,message:n,id:o}=e,s=document.createElement("div");s.classList.add("message"),s.dataset.id=o;const r=document.createElement("div");r.classList.add("message__header");const i=document.createElement("span");i.classList.add("message-date"),i.textContent=t;const a=document.createElement("p");a.classList.add("message__text");const c=n.latitude&&n.longitude?`Мои координаты: ${n.latitude}, ${n.longitude}`:n;return a.innerHTML=c,r.append(i),s.append(r),s.append(a),s}static createImageElement(e){const{id:t,date:n,file:o,info:s}=e,r=document.createElement("div");r.classList.add("message","views"),r.dataset.id=t;const i=document.createElement("div");i.classList.add("message__header");const a=document.createElement("span");a.classList.add("message-date"),a.textContent=n,i.append(a);const c=document.createElement("img");c.src=o;const d=document.createElement("a");return d.href=o,d.download=s.name,d.append(c),r.append(i),r.append(d),r}static createAudioElement(e){const{date:t,file:n,info:o}=e,s=document.createElement("div");s.classList.add("message","audio__message");const r=document.createElement("div");r.classList.add("message__header");const i=document.createElement("span");i.classList.add("message-date"),i.textContent=t,r.append(i);const a=document.createElement("audio");a.setAttribute("controls",!0),a.src=n;const c=document.createElement("p");return c.classList.add("sound__title"),c.innerText=o.name?o.name:"No name",s.append(r),s.append(a),s.append(c),s}static createVideoElement(e){const{date:t,file:n,info:o}=e,s=document.createElement("div");s.classList.add("message");const r=document.createElement("div");r.classList.add("message__header");const i=document.createElement("span");i.classList.add("message-date"),i.textContent=t,r.append(i);const a=document.createElement("video");a.setAttribute("controls",!0),a.src=n;const c=document.createElement("p");return c.classList.add("sound__title"),c.innerText=o.name,s.append(r),s.append(a),s.append(c),s}static createWeatherElement(e){const{location:t,temp:n,icon:o,condition:s}=e.weather,r=document.createElement("div");r.classList.add("weather"),r.dataset.id=e.id;const i=document.createElement("div");i.classList.add("weather__logo");const a=document.createElement("img");a.classList.add("weather__icon"),a.src=o,a.alt=s,i.append(a);const c=document.createElement("div");c.classList.add("weather__info");const d=document.createElement("p");d.textContent=t;const l=document.createElement("p");l.classList.add("weather__temp"),l.textContent=n;const u=document.createElement("span");u.innerHTML=" &#176C",l.append(u);const p=document.createElement("p");return p.textContent=s,c.append(d),c.append(l),c.append(p),r.append(i),r.append(c),r}}class le{constructor(){this.loadFileHandler=[]}init(){this.registerEvents()}registerEvents(){const e=document.querySelector(".file_upload-btn"),t=document.querySelector("#file_upload-field"),n=document.querySelector(".recieved_messages");n.addEventListener("dragover",this.constructor.dragOverHandler),n.addEventListener("drop",this.dropHandler.bind(this)),e.addEventListener("click",(()=>{t.dispatchEvent(new MouseEvent("click"))})),t.addEventListener("change",(e=>{const n=e.target.files[0];n&&(this.onLoad(n),t.value="")}))}addLoadFileHandler(e){this.loadFileHandler.push(e)}onLoad(e){this.loadFileHandler.forEach((t=>{t.call(null,e)}))}static dragOverHandler(e){e.preventDefault()}dropHandler(e){e.preventDefault();const t=Array.from(e.dataTransfer.files)[0];t&&this.onLoad(t)}}class ue{constructor(){this.getGeoButton=document.querySelector(".send_geo-btn"),this.clickEventHandler=[],this.registerEvents()}registerEvents(){this.getGeoButton.addEventListener("click",this.clickHandler.bind(this)),this.popupError=new ce}addClickEventHandler(e){this.clickEventHandler.push(e)}async clickHandler(){try{const{coords:e}=await this.getCurrentGeolocation(),{latitude:t,longitude:n}=e,o={event:"geolocation",type:"geolocation",message:{latitude:t,longitude:n}};this.clickEventHandler.forEach((e=>{e.call(null,o)}))}catch(e){this.popupError.show(this.getGeoButton,"Не удалось получить координаты")}}}class pe{constructor(){this.stopEventHandler=[]}init(){this.registerEvents(),this.actionBtns=document.querySelector(".media_btn-wrapper"),this.recordBtns=document.querySelector(".record_btn-wrapper"),this.stopBtn=document.querySelector(".stop_record-btn"),this.popupError=new ce}registerEvents(){document.querySelector("#record-audio-btn").addEventListener("click",this.audioRecord.bind(this)),document.querySelector("#record-video-btn").addEventListener("click",this.videoRecord.bind(this))}addStopEventHandler(e){this.stopEventHandler.push(e)}async audioRecord(){try{let e=null;const t=await navigator.mediaDevices.getUserMedia({audio:!0,video:!1}),n=new MediaRecorder(t),o=[];n.addEventListener("start",(()=>{this.toggleButtons(),e=this.timer()})),n.addEventListener("dataavailable",(e=>{o.push(e.data)})),n.addEventListener("stop",(()=>{this.toggleButtons(),clearInterval(e);const t=new Blob(o,{type:"audio/ogg; codecs=opus"});this.stopEventHandler.forEach((e=>{e.call(null,t)}))}));const s=()=>{n.stop(),t.getTracks().forEach((e=>e.stop())),this.stopBtn.removeEventListener("click",s)};this.stopBtn.addEventListener("click",s),n.start()}catch(e){const t=document.querySelector(".send_audio-btn");this.popupError.show(t,e.message)}}async videoRecord(){try{let e=null;const t=await navigator.mediaDevices.getUserMedia({audio:!0,video:!0}),n=new MediaRecorder(t),o=[];n.addEventListener("start",(()=>{this.toggleButtons(),e=this.timer()})),n.addEventListener("dataavailable",(e=>{o.push(e.data)})),n.addEventListener("stop",(()=>{this.toggleButtons(),clearInterval(e);const t=new Blob(o,{type:"video/ogg; codecs=theora"});this.stopEventHandler.forEach((e=>{e.call(null,t)}))}));const s=()=>{n.stop(),t.getTracks().forEach((e=>e.stop())),this.stopBtn.removeEventListener("click",s)};this.stopBtn.addEventListener("click",s),n.start()}catch(e){const t=document.querySelector(".send_video-btn");this.popupError.show(t,e.message)}}toggleButtons(){this.actionBtns.classList.toggle("hidden"),this.recordBtns.classList.toggle("hidden")}timer(){const e=document.querySelector(".timer");e.textContent="00:00";let t=0,n=0;return setInterval((()=>{n+=1,60===n&&(t+=1,n=0);const o=t<10?`0${t}`:`${t}`,s=n<10?`0${n}`:`${n}`;e.textContent=`${o}:${s}`}),1e3)}}class fe{constructor(){this.emojiBtn=document.querySelector(".emoji"),this.emojis=["😀","😃","😄","😁","😆","😅","😂","🤣","😋","😊","😇","🙂","🙃","😉","😌","😍","🥰","😘","😗","😙","😈","😎","😐","😖"]}renderEmojiBox(){if(document.querySelector(".emoji_box"))return;const e=document.createElement("ul");e.className="emoji_box",this.emojiBtn.append(e);for(const t of this.emojis){const n=document.createElement("li");n.className="emoji_item",n.textContent=t,e.append(n)}}}class he{constructor(e){this.messages=new de,this.popupError=new ce,this.dnd=new le,this.dnd.init(),this.recorder=new pe,this.recorder.init(),this.geolocation=new ue,this.emoji=new fe,this.wss=null,this.URL=e,this.messagesField=document.querySelector(".recieved_messages"),this.connectBtn=document.querySelector(".connect_btn")}connectWSS(){this.wss=new WebSocket(this.URL),this.wss.addEventListener("open",(()=>{this.setConnectState(!0),this.onLoad()})),this.wss.addEventListener("close",(()=>{this.setConnectState(!1)})),this.wss.addEventListener("error",(()=>{this.setConnectState(!1)})),this.wss.addEventListener("message",(e=>{const t=JSON.parse(e.data);this.receivedMessageHandler(t)}))}sendMessageData(e){const t=JSON.stringify(e);this.wss.send(t)}fileLoader(e){const{name:t,type:n}=e,o=new FileReader;o.readAsDataURL(e),o.onload=()=>{const e=o.result;this.sendMessageData({event:"upLoadFile",file:e,type:"file",info:{name:t,category:n}})}}async receivedMessageHandler(e){switch(e.event){case"newMessage":case"command":case"geolocation":await this.messagesField.append(this.messages.createElement(e)),this.messagesField.scrollTop=this.messagesField.scrollHeight;break;case"getLastMessage":this.renderLastMessage(e),this.messagesField.scrollTop=this.messagesField.scrollHeight;break;case"getHistory":this.renderHistory(e);break;case"upLoadFile":await this.renderFileMessage(e),this.messagesField.scrollTop=this.messagesField.scrollHeight}}onLoad(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.sendMessageData({id:e,event:"getLastMessage"})}onLoadHistory(e){this.sendMessageData({id:e,event:"getHistory"})}async renderFileMessage(e){const t=await this.messages.createElement(e);if(t)await this.messagesField.append(t);else{const e=document.querySelector(".file_upload-btn");this.popupError.show(e,"Не верный формат файла")}}renderLastMessage(e){e.status&&e.message.forEach((e=>{const t=this.messages.createElement(e);this.messagesField.append(t)}))}renderHistory(e){if(!e.status)return;const t=this.messagesField.scrollHeight-this.messagesField.clientHeight;e.message.forEach((e=>{const n=this.messages.createElement(e);this.messagesField.firstElementChild.before(n);const o=this.messagesField.scrollHeight-this.messagesField.clientHeight;this.messagesField.scrollTop=o-t}))}async handleSubmitForm(e){e.preventDefault();const t=e.target.elements.send,n=t.value.trim();if(""===n)return void this.popupError.show(t,"Пустое поле");const o={message:n,type:"text"};if(n.startsWith("/get weather"))try{const e=await this.geolocation.getCurrentGeolocation(),{latitude:t,longitude:n}=e.coords;o.event="command",o.location={latitude:t,longitude:n},this.sendMessageData(o)}catch(e){const t=document.querySelector(".send_geo-btn");this.popupError.show(t,e.message)}n.startsWith("/get")&&!n.startsWith("/get weather")&&(o.event="command",this.sendMessageData(o)),this.sendMessageData({event:"newMessage",message:n,type:"text"}),t.value=""}setConnectState(e){const t=document.querySelector("#status-state");e?(t.className="status_state-online",this.connectBtn.setAttribute("disabled",!0),this.connectBtn.textContent="Connected"):(t.className="status_state-offline",this.connectBtn.removeAttribute("disabled"),this.connectBtn.textContent="Connect")}registerEvents(){const e=document.querySelector("#send-form");e.addEventListener("submit",this.handleSubmitForm.bind(this)),this.connectBtn.addEventListener("click",this.connectWSS.bind(this)),this.dnd.addLoadFileHandler(this.fileLoader.bind(this)),this.geolocation.addClickEventHandler(this.sendMessageData.bind(this)),this.recorder.addStopEventHandler(this.fileLoader.bind(this)),this.messagesField.addEventListener("scroll",(()=>{if(0===this.messagesField.scrollTop){const{id:e}=this.messagesField.firstElementChild.dataset;this.onLoadHistory(e)}}));const t=e.send;t.addEventListener("keyup",(e=>{39===e.keyCode&&""===t.value&&(t.value="/get ")}));const n=document.querySelector(".emoji");n.addEventListener("click",(e=>{document.querySelector(".emoji_box")&&e.target===n?n.firstElementChild.remove():(this.emoji.renderEmojiBox(),document.querySelector(".emoji_box").addEventListener("click",(e=>{t.value+=e.target.textContent}),{once:!0}))}))}init(){this.connectWSS(),this.registerEvents()}}(new class{constructor(){this.api=new he("ws://localhost:8080/ws")}init(){this.api.init()}}).init()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,